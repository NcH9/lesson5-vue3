Базовий Routing:
  Налаштуйте базові маршрути для декількох компонентів у вашому додатку.

Динамічні параметри шляху:
  Створіть маршрут, який використовує динамічний параметр, і виводьте його в компоненті.

Nested Routes:
  Налаштуйте вкладені маршрути і виведіть дочірній компонент в батьківському компоненті.

Programmatic Navigation:
  Реалізуйте програмне перенаправлення між маршрутами за допомогою this.$router.push.

Navigation Guards:
  Додайте navigation guards для захисту маршрутів від неавторизованих користувачів.

Route Meta Fields:
  Використовуйте мета-поля маршруту для передачі даних між маршрутами.

Passing Props to Route Components:
  Налаштуйте маршрут так, щоб параметри шляху передавалися як props до компонента.

404 Not Found Page:
  Реалізуйте "404 Not Found" маршрут і сторінку, яка відображається, коли користувач переходить на неіснуючий маршрут.

Redirecting Routes:
  Треба щоб у проєкті було декілька сторінок котрі будуть:
  - Сторінка яка доступна всім
  - Сторінка доступна лише адміністратору
  - Сторінка доступна лише авторизованим користувачам
  Використовувати Vue Router hooks (beforeEach, afterEach) для перевірки автентифікації користувача і його ролі перед переходом на відповідний маршрут.
  Якщо користувач спробує отримати доступ до сторінки, до якої у нього немає прав, він повинен бути перенаправлений на сторінку 404 Not Found Page.

Custom v-model:
  Реалізуйте компонент, який використовує v-model для налаштування власного введення даних.

Validation with v-model:
  Реалізуйте розширену валідацію форми, використовуючи v-model для управління станом форми і виведенням повідомлень про помилки.

Двонаправлений Data Binding:
  Створіть форму з різними типами полів вводу (текст, число, чекбокс) і використайте v-model для двонаправленого зв'язування даних. 
  Змініть значення моделі в коді і перевірте, чи змінилось значення в полі вводу, і навпаки.

Компонент Counter:
  Реалізуйте компонент лічильника, який використовує v-model для управління його значенням. 
  Компонент повинен мати кнопки для збільшення та зменшення значення лічильника.

Toggle Component:
  Створіть компонент перемикача (toggle), який використовує v-model. 
  Компонент повинен міняти свій стан та виводити різні значення в залежності від свого стану.

Динамічна зміна класів:
  Використовуйте v-model для динамічної зміни класів елемента на основі даних, введених користувачем.

Select Component:
  Завдання: 
    Створити компонент "Select Component" з використанням v-model.

  Основні Вимоги:
    Створіть компонент:
      Розробіть новий компонент, який буде представляти собою випадаючий список (select box).

    Динамічні Опції:
      Компонент повинен приймати масив опцій як prop, щоб користувач міг динамічно визначати доступні опції.

    v-model:
      Інтегруйте v-model, щоб забезпечити зв'язування значення компоненту з зовнішньою змінною, так щоб при зміні вибраної опції, 
      змінювалося значення зовнішньої змінної, і навпаки.

    Стилізація та Верстка:
      Стилізуйте компонент так, щоб він був візуально привабливим та відповідав стандартам верстки.

  Деталізація Завдання:
    Створіть новий Vue компонент, наприклад, CustomSelect.vue.
    Оголосіть prop, наприклад options, для передачі масиву опцій у компонент.
    Використайте v-for для виведення опцій у випадаючому списку на основі переданого масиву опцій.
    Використайте v-model для того, щоб компонент міг взаємодіяти з зовнішніми даними. 
    Ви можете використовувати v-model з computed properties для створення getter і setter методів.
    Стилізуйте ваш компонент, використовуючи CSS або будь-який препроцесор на ваш вибір.

Приклад використання компоненту:
  <template>
    <CustomSelect :options="['Option 1', 'Option 2', 'Option 3']" v-model="selectedOption" />
  </template>

  <script>
  import CustomSelect from '@/components/CustomSelect.vue';

  export default {
    components: {
      CustomSelect
    },
    data() {
      return {
        selectedOption: ''
      };
    }
  }
  </script>